# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vbwSC
else:
    import _vbwSC

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class block(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_vbwSC.block_size_get, _vbwSC.block_size_set)
    alphas = property(_vbwSC.block_alphas_get, _vbwSC.block_alphas_set)
    shiftEnergy = property(_vbwSC.block_shiftEnergy_get, _vbwSC.block_shiftEnergy_set)
    saxsExpPtr = property(_vbwSC.block_saxsExpPtr_get, _vbwSC.block_saxsExpPtr_set)
    saxsErrPtr = property(_vbwSC.block_saxsErrPtr_get, _vbwSC.block_saxsErrPtr_set)
    saxsEnsPtr = property(_vbwSC.block_saxsEnsPtr_get, _vbwSC.block_saxsEnsPtr_set)
    saxsPrePtr = property(_vbwSC.block_saxsPrePtr_get, _vbwSC.block_saxsPrePtr_set)
    saxsMixPtr = property(_vbwSC.block_saxsMixPtr_get, _vbwSC.block_saxsMixPtr_set)
    saxsScale = property(_vbwSC.block_saxsScale_get, _vbwSC.block_saxsScale_set)
    csExpPtr = property(_vbwSC.block_csExpPtr_get, _vbwSC.block_csExpPtr_set)
    csErrPtr = property(_vbwSC.block_csErrPtr_get, _vbwSC.block_csErrPtr_set)
    csRmsPtr = property(_vbwSC.block_csRmsPtr_get, _vbwSC.block_csRmsPtr_set)
    csPrePtr = property(_vbwSC.block_csPrePtr_get, _vbwSC.block_csPrePtr_set)
    csMixPtr = property(_vbwSC.block_csMixPtr_get, _vbwSC.block_csMixPtr_set)
    numberProcs = property(_vbwSC.block_numberProcs_get, _vbwSC.block_numberProcs_set)
    alphaPre = property(_vbwSC.block_alphaPre_get, _vbwSC.block_alphaPre_set)
    rosettaPrior = property(_vbwSC.block_rosettaPrior_get, _vbwSC.block_rosettaPrior_set)
    saxsOn = property(_vbwSC.block_saxsOn_get, _vbwSC.block_saxsOn_set)
    chemicalShiftsOn = property(_vbwSC.block_chemicalShiftsOn_get, _vbwSC.block_chemicalShiftsOn_set)

    def __init__(self):
        _vbwSC.block_swiginit(self, _vbwSC.new_block())
    __swig_destroy__ = _vbwSC.delete_block

# Register block in _vbwSC:
_vbwSC.block_swigregister(block)


def block_alloc(n):
    return _vbwSC.block_alloc(n)

def block_free(t):
    return _vbwSC.block_free(t)

def block_copy(inp, outp):
    return _vbwSC.block_copy(inp, outp)

def block_copy_construct(xp):
    return _vbwSC.block_copy_construct(xp)

def block_destroy(xp):
    return _vbwSC.block_destroy(xp)

def jensen_shannon_div(w_a, w_b, k):
    return _vbwSC.jensen_shannon_div(w_a, w_b, k)

def SaxsScaleMean(saxs_ens, saxs_exp, err_saxs, N):
    return _vbwSC.SaxsScaleMean(saxs_ens, saxs_exp, err_saxs, N)

def L_function(xp):
    return _vbwSC.L_function(xp)

def L_distance(xp, yp):
    return _vbwSC.L_distance(xp, yp)

def L_print(xp):
    return _vbwSC.L_print(xp)

def L_take_step(r, xp, step_size):
    return _vbwSC.L_take_step(r, xp, step_size)

def run_vbw(again, k, pre_weight_file, structure_energies_file, N, n, presaxsfile, Ncurves, curvesfile, outfile, nprocs, w_cut, skip_vbw, precsfile, rmscsfile, chemical_shifts_fite):
    return _vbwSC.run_vbw(again, k, pre_weight_file, structure_energies_file, N, n, presaxsfile, Ncurves, curvesfile, outfile, nprocs, w_cut, skip_vbw, precsfile, rmscsfile, chemical_shifts_fite)


